(saveFormat "2.3")
(date "Thu 26/Feb/2004 20:40:42 ")
(veerev "6.2")
(platform "PC")
(execMode v6)
(prefExecMode v9)
(filterNAN 0)
(workspaceStackingOrder M)
(sysconfig
(iodevice "fgen"
(type GPIB)
(gateway "This host")
(channel 7)
(subchannel 7)
(readTerm "\n")
(fs ",")
(eol "\n")
(multiField dataOnly)
(arrayFormat linear)
(timeout 5)
(byteOrder 0)
(isLive 0)
(idFileName "hp3325b.cid")
(eoiEnabled 0)
(model "hp3325b"
(standard 488))))
(SaveCF no)
(device 0 ROOTCONTEXT
(properties
(trigMode deg)
(nextID 11)
(popupTitleText "Instrument I/O Methods")
(popupMoveable 1)
(popupTitleTextColor "Black")
(popupTitleBackgroundColor "Gray")
(deleteGlobals 0))
(deviceList
(device 0 NOTE
(properties
(name "Warranty Disclaimer")
(text2 4 "This example is provided as an"
"illustration \"as is\", and Keysight Technologies"
"makes no warranty of any kind" "with regard to this example.")))
(device 1 START25)
(device 2 CONSTANT
(properties
(name "Real"))
(interface
(output 1
(lock name constraints)))
(implementation
(value Real
(data  2345))
(initValue Real
(data  0))))
(device 3 CONFIRM25
(interface
(output 1
(name "Go")
(lock name constraints)))
(implementation))
(device 4 CONSTANT
(properties
(name "Real"))
(interface
(output 1
(lock name constraints)))
(implementation
(value Real
(data  987000))
(initValue Real
(data  0))))
(device 5 HPIDINCR
(properties
(name "fgen(NOT LIVE)"))
(interface
(input 1
(name "FREQUENCY")
(tag "FREQUENCY")
(requires
(datatype Real64)
(shape "Scalar"))
(lock constraints)
(optional yes)))
(implementation
(filename "hp3325b.cid")
(driver "fgen")))
(device 6 CONFIRM25
(interface
(output 1
(name "Go")
(lock name constraints)))
(implementation))
(device 7 CONSTANT
(properties
(name "Real"))
(interface
(output 1
(lock name constraints)))
(implementation
(value Real
(data  0.0123))
(initValue Real
(data  0))))
(device 8 HPIDSTATE
(properties
(name "fgen(NOT LIVE)"))
(interface
(input 1
(name "FREQUENCY")
(tag "FREQUENCY")
(requires
(datatype Real64)
(shape "Scalar"))
(lock constraints)
(optional yes)))
(implementation
(filename "hp3325b.cid")
(driver "fgen")
(state
(idComp
(name "FUNCTION")
(typeStr "Enum")
(state "Valid")
(value "SINE"))
(idComp
(name "FREQ_UPPER_LIM")
(typeStr "Real")
(state "Valid")
(value 60999999.999))
(idComp
(name "FREQUENCY")
(typeStr "Real")
(state "Valid")
(value 2345))
(idComp
(name "AMPLITUDE_LOWER_LIM")
(typeStr "Real")
(state "Valid")
(value 0.001))
(idComp
(name "AMPLITUDE_UPPER_LIM")
(typeStr "Real")
(state "Valid")
(value 10))
(idComp
(name "AMPLITUDE")
(typeStr "Real")
(state "Valid")
(value 0.001))
(idComp
(name "AUNITS")
(typeStr "Enum")
(state "Valid")
(value "VPP"))
(idComp
(name "OFFSET_LOWER_LIM")
(typeStr "Real")
(state "Valid")
(value -4.502))
(idComp
(name "OFFSET_UPPER_LIM")
(typeStr "Real")
(state "Valid")
(value 4.502))
(idComp
(name "OFFSET")
(typeStr "Real")
(state "Valid")
(value 0))
(idComp
(name "PHASE")
(typeStr "Real")
(state "Valid")
(value 0))
(idComp
(name "START_FREQ")
(typeStr "Real")
(state "Valid")
(value 1000000))
(idComp
(name "STOP_FREQ")
(typeStr "Real")
(state "Valid")
(value 10000000))
(idComp
(name "MKR_FREQ")
(typeStr "Real")
(state "Valid")
(value 5000000))
(idComp
(name "SWEEP_TIME")
(typeStr "Real")
(state "Valid")
(value 1))
(idComp
(name "SWEEP_MODE")
(typeStr "Enum")
(state "Valid")
(value "LIN"))
(idComp
(name "TERMINALS")
(typeStr "Enum")
(state "Valid")
(value "FRONT"))
(idComp
(name "CALIBRATE")
(typeStr "Enum")
(state "Valid")
(value "ENABLE"))
(idComp
(name "MOD_FUNCTION")
(typeStr "Enum")
(state "Valid")
(value "OFF"))
(idComp
(name "MOD_FREQ_UPPER_LIM")
(typeStr "Real")
(state "Valid")
(value 10000))
(idComp
(name "MOD_FREQUENCY")
(typeStr "Real")
(state "Valid")
(value 1000))
(idComp
(name "MOD_AMP_UPPER_LIM")
(typeStr "Real")
(state "Valid")
(value 12))
(idComp
(name "MOD_AMPLITUDE")
(typeStr "Real")
(state "Valid")
(value 0.1))
(idComp
(name "MOD_AMPLITUDE_UNITS")
(typeStr "Enum")
(state "Valid")
(value "VPP"))
(idComp
(name "AM")
(typeStr "Enum")
(state "Valid")
(value "OFF"))
(idComp
(name "PM")
(typeStr "Enum")
(state "Valid")
(value "OFF"))
(idComp
(name "INSTR_STATUS_MASK")
(typeStr "Int16")
(state "Valid")
(value 0)))))
(device 9 IODEVICE
(properties
(name "fgen (hp3325b @ (NOT LIVE))")
(transactions 1 "WRITE TEXT \"FR\", A, \"HZ\" EOL"))
(interface
(input 1
(name "A")
(tag "A")
(optional yes)))
(implementation
(iopath "fgen")))
(device 10 NOTE
(properties
(text2 110 "Purpose: To show the three methods in "
"  VEE for programming instruments." ""
"User Input Required: The veeio file must" "  contain an \"fgen\" device." ""
"Explanation:" "  The three methods available in VEE for"
"  instrument programming are: \"Panel "
"  Drivers\",\"Component Drivers\", and "
"  \"Direct I/O\".  Any of these methods "
"  can be used to control instruments which"
"  have been configured.  To use \"Panel\""
"  or \"Component Drivers\", an Instrument"
"  Driver file must be available.  A " "  library of Instrument Drivers is "
"  provided with the product.  They are " "  in <installDir>/instruments." ""
"  1. Panel Drivers - A Panel Driver " "  provides one or more panels.  The "
"  fields on the panels behave much like" "  fields in other objects in VEE.  "
"  Changing a field immediately sends" "  commands over the interface to the "
"  instrument." "" "  Mutliple Panel Driver objects for the"
"  same instrument may appear in the same"
"  model. Each instance represents a " "  different state of the instrument." ""
"  When a Panel Driver executes, VEE " "  sends just enough commands to the "
"  instrument so its state matches the " "  state presented in all the panels, "
"  even the ones not visible.  If inputs" "  are present, they are checked for "
"  validity, copied to the internal state," "  then the instrument\'s state is "
"  programmed." "" "  This example shows an fgen \"Panel "
"  Driver\" with an input added for the "
"  frequency component.  When the model " "  is run, the value in the top real "
"  constant object is sent to the \"Panel"
"  Driver\".  The \"Panel Driver\" object"
"  programs the frequency of the fgen to"
"  that value.  If the instrument\'s state"
"  differs from any other value in a " "  panel, that component is also "
"  programmed." "" "  2. Component Driver - A \"Component "
"  Driver\" provides access through " "  inputs to the same components "
"  available with the \"Panel Driver\","
"  but the panels are gone.  Thus, the "
"  overhead of maintaining the panels is" "  obviated." ""
"  Executing a Component Driver without" "  inputs has no effect on the "
"  instrument.  Only the components which" "  have inputs are programmed." ""
"  In this example, when the middle real"
"  constant is executed, its value is " "  sent to the Component Driver.  Only "
"  the frequency of the fgen is " "  programmed." ""
"  3. Direct I/O - A \"Direct I/O\" object"
"  provides low level access to the " "  instrument.  What is transmitted to "
"  and from the instrument is exactly" "  specified in the transactions.  The"
"  codes and formats understood by the "
"  instrument must be handled properly." ""
"  To program the frequency of the fgen, "
"  FR, followed by a number, followed by" "  HZ must be sent.  " ""
"Which to use when:" "  1. Panel Driver - when lots of "
"  components change or the previous " "  state is not exactly known, using a "
"  Panel Driver saves work.  VEE tracks"
"  the current state of the instrument " "  so it knows the minimum number of "
"  commands to send." "" "  2. Component Driver - when only a few "
"  components change, say inside a loop,"
"  the Component driver is a good choice."
"  It is faster than the Panel Driver." ""
"  3. Direct I/O - when an \"Instrument "
"  Driver\" is not available or maximum"
"  performance is needed, \"Direct I/O\" "
"  is the right choice. Both \"Panel\" and"
"  \"Component Drivers\" know the codes and"
"  formats needed by the particular" "  instrument.  With Direct I/O the "
"  proper codes must be provided by the" "  user.")))
(configuration
(connect D1:0 D2:0)
(connect D2:0 D3:0)
(connect D3:1 D4:0)
(connect D4:1 D5:1)
(connect D4:0 D6:0)
(connect D6:1 D7:0)
(connect D2:1 D8:1)
(connect D7:1 D9:1)))
(contextCarrier
(wndOrigin 2 2)
(wndState res)
(active detail)
(detail
(extent 781 462)
(anchorPt 722 36)
(configuration
(devCarrierFor 0
(active icon)
(icon
(extent 338 48)
(iconImage "disclaim.gif")
(label off))
(open
(extent 397 82)
(editing disabled))
(pinCenter 0 0))
(devCarrierFor 1
(active open)
(icon)
(open
(extent 67 37))
(title off)
(pinCenter -210 80))
(devCarrierFor 2
(active open)
(icon)
(open
(extent 120 28)
(showFormat real))
(pinCenter -190 190))
(devCarrierFor 3
(active open)
(icon)
(open
(extent 58 37))
(title off)
(pinCenter -190 250))
(devCarrierFor 4
(active open)
(icon)
(open
(extent 120 28)
(showFormat real))
(pinCenter -190 380))
(devCarrierFor 5
(active open)
(icon
(extent 78 64)
(iconImage "io.icn"))
(open
(extent 86 54))
(terminals on)
(pinCenter 73 410))
(devCarrierFor 6
(active open)
(icon)
(open
(extent 58 37))
(title off)
(pinCenter -190 430))
(devCarrierFor 7
(active open)
(icon)
(open
(extent 120 28)
(showFormat real))
(pinCenter -190 540))
(devCarrierFor 8
(active open)
(icon
(extent 78 64)
(iconImage "inst.icn"))
(open
(extent 214 213)
(visiblePanels 5 "MAIN_PANEL" "ENTRY_PANEL" "STATE_SR" "CALIBRATE" "TOP_PANEL"))
(terminals on)
(pinCenter 105 220))
(devCarrierFor 9
(active open)
(icon
(iconImage "io.icn"))
(open
(extent 284 96))
(terminals on)
(pinCenter 65 540))
(devCarrierFor 10
(active open)
(icon)
(open
(extent 441 475)
(editing enabled))
(pinCenter -490 240))
(connect D1:0 D2:0
(points 4 -210 101 -210 120 -190 120 -190 155))
(connect D2:0 D3:0
(points 2 -190 206 -190 229))
(connect D3:1 D4:0
(points 5 -159 250 -140 250 -140 290 -190 290 -190 345))
(connect D4:1 D5:1
(points 4 -128 380 -110 380 -110 410 -63 410))
(connect D4:0 D6:0
(points 2 -190 396 -190 409))
(connect D6:1 D7:0
(points 5 -159 430 -140 430 -140 470 -190 470 -190 505))
(connect D2:1 D8:1
(points 4 -128 190 -120 190 -120 220 -95 220))
(connect D7:1 D9:1
(points 2 -128 540 -110 540)))
(stackingOrder 1 2 3 4 5 6 7 8 9 0 10))
(numberFormats
(realFormat standard)
(realSigDigits 4)
(realRadixSpec 4)
(integerBase decimal))))
