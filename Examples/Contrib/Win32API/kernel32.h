
char* __stdcall GetCommandLineA(void);
char* __stdcall GetEnvironmentStringsA(void);
long __stdcall AllocConsole(void);
long __stdcall BackupSeek(long hFile, long dwLowBytesToSeek, long dwHighBytesToSeek, long* lpdwLowByteSeeked, long* lpdwHighByteSeeked, long* lpContext);
long __stdcall Beep(long dwFreq, long dwDuration);
long __stdcall BeginUpdateResourceA(char* pFileName, long bDeleteExistingResources);
long __stdcall ClearCommBreak(long nCid);
long __stdcall CloseHandle(long hObject);
long __stdcall CompareStringA(long Locale, long dwCmpFlags, char* lpString1, long cchCount1, char* lpString2, long cchCount2);
long __stdcall ContinueDebugEvent(long dwProcessId, long dwThreadId, long dwContinueStatus);
long __stdcall CopyFileA(char* lpExistingFileName, char* lpNewFileName, long bFailIfExists);
long __stdcall CreateIoCompletionPort(long FileHandle, long ExistingCompletionPort, long CompletionKey, long NumberOfConcurrentThreads);
long __stdcall CreateTapePartition(long hDevice, long dwPartitionMethod, long dwCount, long dwSize);
long __stdcall DebugActiveProcess(long dwProcessId);
long __stdcall DefineDosDeviceA(long dwFlags, char* lpDeviceName, char* lpTargetPath);
long __stdcall DeleteFileA(char* lpFileName);
long __stdcall DisableThreadLibraryCalls(long hLibModule);
long __stdcall DisconnectNamedPipe(long hNamedPipe);
long __stdcall DuplicateHandle(long hSourceProcessHandle, long hSourceHandle, long hTargetProcessHandle, long* lpTargetHandle, long dwDesiredAccess, long bInheritHandle, long dwOptions);
long __stdcall EndUpdateResourceA(long hUpdate, long fDiscard);
long __stdcall EnumCalendarInfoA(long lpCalInfoEnumProc, long Locale, long Calendar, long CalType);
long __stdcall EnumResourceLanguagesA(long hModule, char* lpType, char* lpName, long lpEnumFunc, long lParam);
long __stdcall EnumResourceNamesA(long hModule, char* lpType, long lpEnumFunc, long lParam);
long __stdcall EnumResourceTypesA(long hModule, long lpEnumFunc, long lParam);
long __stdcall EraseTape(long hDevice, long dwEraseType, long bimmediate);
long __stdcall EscapeCommFunction(long nCid, long nFunc);
long __stdcall ExpandEnvironmentStringsA(char* lpSrc, char* lpDst, long nSize);
long __stdcall FindClose(long hFindFile);
long __stdcall FindCloseChangeNotification(long hChangeHandle);
long __stdcall FindFirstChangeNotificationA(char* lpPathName, long bWatchSubtree, long dwNotifyFilter);
long __stdcall FindNextChangeNotification(long hChangeHandle);
long __stdcall FindResourceA(long hInstance, char* lpName, char* lpType);
long __stdcall FindResourceExA(long hModule, char* lpType, char* lpName, long wLanguage);
long __stdcall FlushConsoleInputBuffer(long hConsoleInput);
long __stdcall FlushFileBuffers(long hFile);
long __stdcall FoldStringA(long dwMapFlags, char* lpSrcStr, long cchSrc, char* lpDestStr, long cchDest);
long __stdcall FreeConsole(void);
long __stdcall FreeEnvironmentStringsA(char* lpsz);
long __stdcall FreeLibrary(long hLibModule);
long __stdcall FreeResource(long hResData);
long __stdcall GenerateConsoleCtrlEvent(long dwCtrlEvent, long dwProcessGroupId);
long __stdcall GetACP(void);
long __stdcall GetBinaryTypeA(char* lpApplicationName, long* lpBinaryType);
long __stdcall GetCommMask(long hFile, long* lpEvtMask);
long __stdcall GetCommModemStatus(long hFile, long* lpModemStat);
long __stdcall GetCompressedFileSizeA(char* lpFileName, long* lpFileSizeHigh);
long __stdcall GetComputerNameA(char* lpBuffer, long* nSize);
long __stdcall GetConsoleCP(void);
long __stdcall GetConsoleMode(long hConsoleHandle, long* lpMode);
long __stdcall GetConsoleOutputCP(void);
long __stdcall GetConsoleTitleA(char* lpConsoleTitle, long nSize);
long __stdcall GetCurrentDirectoryA(long nBufferLength, char* lpBuffer);
long __stdcall GetCurrentProcess(void);
long __stdcall GetCurrentProcessId(void);
long __stdcall GetCurrentThread(void);
long __stdcall GetCurrentThreadId(void);
long __stdcall GetDiskFreeSpaceA(char* lpRootPathName, long* lpSectorsPerCluster, long* lpBytesPerSector, long* lpNumberOfFreeClusters, long* lpTotalNumberOfClusters);
long __stdcall GetDriveTypeA(char* nDrive);
long __stdcall GetEnvironmentVariableA(char* lpName, char* lpBuffer, long nSize);
long __stdcall GetExitCodeProcess(long hProcess, long* lpExitCode);
long __stdcall GetExitCodeThread(long hThread, long* lpExitCode);
long __stdcall GetFileAttributesA(char* lpFileName);
long __stdcall GetFileSize(long hFile, long* lpFileSizeHigh);
long __stdcall GetFileType(long hFile);
long __stdcall GetFullPathNameA(char* lpFileName, long nBufferLength, char* lpBuffer, char* lpFilePart);
long __stdcall GetHandleInformation(long hObject, long* lpdwFlags);
long __stdcall GetLastError(void);
long __stdcall GetLocaleInfoA(long Locale, long LCType, char* lpLCData, long cchData);
long __stdcall GetLogicalDriveStringsA(long nBufferLength, char* lpBuffer);
long __stdcall GetLogicalDrives(void);
long __stdcall GetMailslotInfo(long hMailslot, long* lpMaxMessageSize, long* lpNextSize, long* lpMessageCount, long* lpReadTimeout);
long __stdcall GetModuleFileNameA(long hModule, char* lpFileName, long nSize);
long __stdcall GetModuleHandleA(char* lpModuleName);
long __stdcall GetNamedPipeHandleStateA(long hNamedPipe, long* lpState, long* lpCurInstances, long* lpMaxCollectionCount, long* lpCollectDataTimeout, char* lpUserName, long nMaxUserNameSize);
long __stdcall GetNamedPipeInfo(long hNamedPipe, long* lpFlags, long* lpOutBufferSize, long* lpInBufferSize, long* lpMaxInstances);
long __stdcall GetNumberOfConsoleInputEvents(long hConsoleInput, long* lpNumberOfEvents);
long __stdcall GetNumberOfConsoleMouseButtons(long* lpNumberOfMouseButtons);
long __stdcall GetOEMCP(void);
long __stdcall GetPriorityClass(long hProcess);
long __stdcall GetPrivateProfileIntA(char* lpApplicationName, char* lpKeyName, long nDefault, char* lpFileName);
long __stdcall GetPrivateProfileSectionA(char* lpAppName, char* lpReturnedString, long nSize, char* lpFileName);
long __stdcall GetProcAddress(long hModule, char* lpProcName);
long __stdcall GetProcessAffinityMask(long hProcess, long* lpProcessAffinityMask, long* SystemAffinityMask);
long __stdcall GetProcessHeap(void);
long __stdcall GetProcessHeaps(long NumberOfHeaps, long* ProcessHeaps);
long __stdcall GetProcessShutdownParameters(long* lpdwLevel, long* lpdwFlags);
long __stdcall GetProcessWorkingSetSize(long hProcess, long* lpMinimumWorkingSetSize, long* lpMaximumWorkingSetSize);
long __stdcall GetProfileIntA(char* lpAppName, char* lpKeyName, long nDefault);
long __stdcall GetProfileSectionA(char* lpAppName, char* lpReturnedString, long nSize);
long __stdcall GetProfileStringA(char* lpAppName, char* lpKeyName, char* lpDefault, char* lpReturnedString, long nSize);
long __stdcall GetQueuedCompletionStatus(long CompletionPort, long* lpNumberOfBytesTransferred, long* lpCompletionKey, long* lpOverlapped, long dwMilliseconds);
long __stdcall GetShortPathNameA(char* lpszLongPath, char* lpszShortPath, long cchBuffer);
long __stdcall GetStdHandle(long nStdHandle);
long __stdcall GetStringTypeA(long lcid, long dwInfoType, char* lpSrcStr, long cchSrc, long* lpCharType);
long __stdcall GetStringTypeExA(long Locale, long dwInfoType, char* lpSrcStr, long cchSrc, short* lpCharType);
long __stdcall GetStringTypeW(long dwInfoType, char* lpSrcStr, long cchSrc, short* lpCharType);
long __stdcall GetSystemDefaultLCID(void);
long __stdcall GetSystemDirectoryA(char* lpBuffer, long nSize);
long __stdcall GetSystemTimeAdjustment(long* lpTimeAdjustment, long* lpTimeIncrement, long* lpTimeAdjustmentDisabled);
long __stdcall GetTapePosition(long hDevice, long dwPositionType, long* lpdwPartition, long* lpdwOffsetLow, long* lpdwOffsetHigh);
long __stdcall GetTapeStatus(long hDevice);
long __stdcall GetTempFileNameA(char* lpszPath, char* lpPrefixString, long wUnique, char* lpTempFileName);
long __stdcall GetTempPathA(long nBufferLength, char* lpBuffer);
long __stdcall GetThreadPriority(long hThread);
long __stdcall GetTickCount(void);
long __stdcall GetUserDefaultLCID(void);
long __stdcall GetVersion(void);
long __stdcall GetVolumeInformationA(char* lpRootPathName, char* lpVolumeNameBuffer, long nVolumeNameSize, long* lpVolumeSerialNumber, long* lpMaximumComponentLength, long* lpFileSystemFlags, char* lpFileSystemNameBuffer, long nFileSystemNameSize);
long __stdcall GetWindowsDirectoryA(char* lpBuffer, long nSize);
long __stdcall GlobalAlloc(long wFlags, long dwBytes);
long __stdcall GlobalCompact(long dwMinFree);
long __stdcall GlobalFlags(long hMem);
long __stdcall GlobalFree(long hMem);
long __stdcall GlobalGetAtomNameA(short nAtom, char* lpBuffer, long nSize);
long __stdcall GlobalLock(long hMem);
long __stdcall GlobalReAlloc(long hMem, long dwBytes, long wFlags);
long __stdcall GlobalSize(long hMem);
long __stdcall GlobalUnWire(long hMem);
long __stdcall GlobalUnlock(long hMem);
long __stdcall GlobalWire(long hMem);
long __stdcall HeapAlloc(long hHeap, long dwFlags, long dwBytes);
long __stdcall HeapCompact(long hHeap, long dwFlags);
long __stdcall HeapCreate(long flOptions, long dwInitialSize, long dwMaximumSize);
long __stdcall HeapDestroy(long hHeap);
long __stdcall HeapLock(long hHeap);
long __stdcall HeapUnlock(long hHeap);
long __stdcall ImpersonateLoggedOnUser(long hToken);
long __stdcall InitAtomTable(long nSize);
long __stdcall InterlockedDecrement(long* lpAddend);
long __stdcall InterlockedExchange(long* Target, long Value);
long __stdcall InterlockedIncrement(long* lpAddend);
long __stdcall IsBadCodePtr(long lpfn);
long __stdcall IsBadStringPtrA(char* lpsz, long ucchMax);
long __stdcall IsValidCodePage(long CodePage);
long __stdcall LCMapStringA(long Locale, long dwMapFlags, char* lpSrcStr, long cchSrc, char* lpDestStr, long cchDest);
long __stdcall LoadLibraryA(char* lpLibFileName);
long __stdcall LoadLibraryExA(char* lpLibFileName, long hFile, long dwFlags);
long __stdcall LoadResource(long hInstance, long hResInfo);
long __stdcall LocalAlloc(long wFlags, long wBytes);
long __stdcall LocalCompact(long uMinFree);
long __stdcall LocalFlags(long hMem);
long __stdcall LocalFree(long hMem);
long __stdcall LocalLock(long hMem);
long __stdcall LocalReAlloc(long hMem, long wBytes, long wFlags);
long __stdcall LocalShrink(long hMem, long cbNewSize);
long __stdcall LocalSize(long hMem);
long __stdcall LocalUnlock(long hMem);
long __stdcall LockFile(long hFile, long dwFileOffsetLow, long dwFileOffsetHigh, long nNumberOfBytesToLockLow, long nNumberOfBytesToLockHigh);
long __stdcall LockResource(long hResData);
long __stdcall LogonUserA(char* lpszUsername, char* lpszDomain, char* lpszPassword, long dwLogonType, long dwLogonProvider, long* phToken);
long __stdcall MapViewOfFile(long hFileMappingObject, long dwDesiredAccess, long dwFileOffsetHigh, long dwFileOffsetLow, long dwNumberOfBytesToMap);
long __stdcall MoveFileA(char* lpExistingFileName, char* lpNewFileName);
long __stdcall MoveFileExA(char* lpExistingFileName, char* lpNewFileName, long dwFlags);
long __stdcall MulDiv(long nNumber, long nNumerator, long nDenominator);
long __stdcall MultiByteToWideChar(long CodePage, long dwFlags, char* lpMultiByteStr, long cchMultiByte, char* lpWideCharStr, long cchWideChar);
long __stdcall OpenEventA(long dwDesiredAccess, long bInheritHandle, char* lpName);
long __stdcall OpenFileMappingA(long dwDesiredAccess, long bInheritHandle, char* lpName);
long __stdcall OpenMutexA(long dwDesiredAccess, long bInheritHandle, char* lpName);
long __stdcall OpenProcess(long dwDesiredAccess, long bInheritHandle, long dwProcessId);
long __stdcall OpenSemaphoreA(long dwDesiredAccess, long bInheritHandle, char* lpName);
long __stdcall PrepareTape(long hDevice, long dwOperation, long bimmediate);
long __stdcall PulseEvent(long hEvent);
long __stdcall PurgeComm(long hFile, long dwFlags);
long __stdcall QueryDosDeviceA(char* lpDeviceName, char* lpTargetPath, long ucchMax);
long __stdcall ReleaseMutex(long hMutex);
long __stdcall ReleaseSemaphore(long hSemaphore, long lReleaseCount, long* lpPreviousCount);
long __stdcall RemoveDirectoryA(char* lpPathName);
long __stdcall ResetEvent(long hEvent);
long __stdcall ResumeThread(long hThread);
long __stdcall SearchPathA(char* lpPath, char* lpFileName, char* lpExtension, long nBufferLength, char* lpBuffer, char* lpFilePart);
long __stdcall SetCommBreak(long nCid);
long __stdcall SetCommMask(long hFile, long dwEvtMask);
long __stdcall SetComputerNameA(char* lpComputerName);
long __stdcall SetConsoleActiveScreenBuffer(long hConsoleOutput);
long __stdcall SetConsoleCP(long wCodePageID);
long __stdcall SetConsoleCtrlHandler(long HandlerRoutine, long Add);
long __stdcall SetConsoleMode(long hConsoleHandle, long dwMode);
long __stdcall SetConsoleOutputCP(long wCodePageID);
long __stdcall SetConsoleTextAttribute(long hConsoleOutput, long wAttributes);
long __stdcall SetConsoleTitleA(char* lpConsoleTitle);
long __stdcall SetCurrentDirectoryA(char* lpPathName);
long __stdcall SetEndOfFile(long hFile);
long __stdcall SetEnvironmentVariableA(char* lpName, char* lpValue);
long __stdcall SetErrorMode(long wMode);
long __stdcall SetEvent(long hEvent);
long __stdcall SetFileAttributesA(char* lpFileName, long dwFileAttributes);
long __stdcall SetFilePointer(long hFile, long lDistanceToMove, long* lpDistanceToMoveHigh, long dwMoveMethod);
long __stdcall SetHandleCount(long wNumber);
long __stdcall SetHandleInformation(long hObject, long dwMask, long dwFlags);
long __stdcall SetLocaleInfoA(long Locale, long LCType, char* lpLCData);
long __stdcall SetMailslotInfo(long hMailslot, long lReadTimeout);
long __stdcall SetNamedPipeHandleState(long hNamedPipe, long* lpMode, long* lpMaxCollectionCount, long* lpCollectDataTimeout);
long __stdcall SetPriorityClass(long hProcess, long dwPriorityClass);
long __stdcall SetProcessShutdownParameters(long dwLevel, long dwFlags);
long __stdcall SetProcessWorkingSetSize(long hProcess, long dwMinimumWorkingSetSize, long dwMaximumWorkingSetSize);
long __stdcall SetStdHandle(long nStdHandle, long nHandle);
long __stdcall SetSystemPowerState(long fSuspend, long fForce);
long __stdcall SetSystemTimeAdjustment(long dwTimeAdjustment, short bTimeAdjustmentDisabled);
long __stdcall SetTapePosition(long hDevice, long dwPositionMethod, long dwPartition, long dwOffsetLow, long dwOffsetHigh, long bimmediate);
long __stdcall SetThreadAffinityMask(long hThread, long dwThreadAffinityMask);
long __stdcall SetThreadLocale(long Locale);
long __stdcall SetThreadPriority(long hThread, long nPriority);
long __stdcall SetUnhandledExceptionFilter(long lpTopLevelExceptionFilter);
long __stdcall SetVolumeLabelA(char* lpRootPathName, char* lpVolumeName);
long __stdcall SetupComm(long hFile, long dwInQueue, long dwOutQueue);
long __stdcall SizeofResource(long hInstance, long hResInfo);
long __stdcall SleepEx(long dwMilliseconds, long bAlertable);
long __stdcall SuspendThread(long hThread);
long __stdcall TerminateProcess(long hProcess, long uExitCode);
long __stdcall TerminateThread(long hThread, long dwExitCode);
long __stdcall TlsAlloc(void);
long __stdcall TlsFree(long dwTlsIndex);
long __stdcall TlsGetValue(long dwTlsIndex);
long __stdcall UnlockFile(long hFile, long dwFileOffsetLow, long dwFileOffsetHigh, long nNumberOfBytesToUnlockLow, long nNumberOfBytesToUnlockHigh);
long __stdcall VerLanguageNameA(long wLang, char* szLang, long nSize);
long __stdcall WaitForMultipleObjects(long nCount, long* lpHandles, long bWaitAll, long dwMilliseconds);
long __stdcall WaitForMultipleObjectsEx(long nCount, long* lpHandles, long bWaitAll, long dwMilliseconds, long bAlertable);
long __stdcall WaitForSingleObject(long hHandle, long dwMilliseconds);
long __stdcall WaitForSingleObjectEx(long hHandle, long dwMilliseconds, long bAlertable);
long __stdcall WaitNamedPipeA(char* lpNamedPipeName, long nTimeOut);
long __stdcall WideCharToMultiByte(long CodePage, long dwFlags, char* lpWideCharStr, long cchWideChar, char* lpMultiByteStr, long cchMultiByte, char* lpDefaultChar, long lpUsedDefaultChar);
long __stdcall WinExec(char* lpCmdLine, long nCmdShow);
long __stdcall WritePrivateProfileSectionA(char* lpAppName, char* lpString, char* lpFileName);
long __stdcall WriteProfileSectionA(char* lpAppName, char* lpString);
long __stdcall WriteProfileStringA(char* lpszSection, char* lpszKeyName, char* lpszString);
long __stdcall WriteTapemark(long hDevice, long dwTapemarkType, long dwTapemarkCount, long bimmediate);
long __stdcall _hwrite(long hFile, char* lpBuffer, long lBytes);
long __stdcall _lclose(long hFile);
long __stdcall _lcreat(char* lpPathName, long iAttribute);
long __stdcall _llseek(long hFile, long lOffset, long iOrigin);
long __stdcall _lopen(char* lpPathName, long iReadWrite);
long __stdcall _lwrite(long hFile, char* lpBuffer, long wBytes);
long __stdcall lstrcatA(char* lpString1, char* lpString2);
long __stdcall lstrcmpA(char* lpString1, char* lpString2);
long __stdcall lstrcmpiA(char* lpString1, char* lpString2);
long __stdcall lstrcpyA(char* lpString1, char* lpString2);
long __stdcall lstrcpynA(char* lpString1, char* lpString2, long iMaxLength);
long __stdcall lstrlenA(char* lpString);
short __stdcall GetSystemDefaultLangID(void);
short __stdcall GetUserDefaultLangID(void);
short __stdcall GlobalAddAtomA(char* lpString);
short __stdcall GlobalDeleteAtom(short nAtom);
short __stdcall GlobalFindAtomA(char* lpString);
